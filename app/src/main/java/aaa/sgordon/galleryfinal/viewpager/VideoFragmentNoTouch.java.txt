package aaa.sgordon.galleryfinal.viewpager;

import android.annotation.SuppressLint;
import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewStub;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.OptIn;
import androidx.fragment.app.Fragment;
import androidx.media3.common.MediaItem;
import androidx.media3.common.Player;
import androidx.media3.common.VideoSize;
import androidx.media3.common.util.UnstableApi;
import androidx.media3.exoplayer.ExoPlayer;
import androidx.media3.ui.PlayerControlView;
import androidx.viewpager2.widget.ViewPager2;

import com.otaliastudios.zoom.ZoomSurfaceView;

import java.io.FileNotFoundException;
import java.net.ConnectException;

import aaa.sgordon.galleryfinal.R;
import aaa.sgordon.galleryfinal.databinding.VpViewpageBinding;
import aaa.sgordon.galleryfinal.gallery.ListItem;
import aaa.sgordon.galleryfinal.repository.hybrid.ContentsNotFoundException;
import aaa.sgordon.galleryfinal.repository.hybrid.HybridAPI;
import aaa.sgordon.galleryfinal.viewpager.components.DragPage;

public class VideoFragmentNoTouch extends Fragment {
	private VpViewpageBinding binding;
	private final ListItem item;

	private ViewPagerFragment parentFrag;
	private ViewPager2 viewPager;

	private DragPage dragPage;

	private ExoPlayer player;
	private ZoomSurfaceView surface;


	public VideoFragmentNoTouch(ListItem item) {
		this.item = item;
	}

	@Override
	public void onCreate(@Nullable Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		parentFrag = (ViewPagerFragment) requireParentFragment();
		viewPager = parentFrag.requireView().findViewById(R.id.viewpager);
	}

	@Nullable
	@Override
	public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
		binding = VpViewpageBinding.inflate(inflater, container, false);


		//Swap out ViewA for our PhotoView
		ViewStub mediaStub = binding.mediaStub;
		mediaStub.setLayoutResource(R.layout.vp_video);
		mediaStub.inflate();

		binding.viewA.findViewById(R.id.media).setTransitionName(item.filePath.toString());


		ViewStub bottomSliderStub = binding.bottomSliderStub;
		bottomSliderStub.setLayoutResource(R.layout.vp_bottom);
		bottomSliderStub.inflate();

		binding.viewB.findViewById(R.id.test_button).setOnClickListener(v -> {
			Toast.makeText(requireContext(), "Test Button Clicked", Toast.LENGTH_SHORT).show();
		});


		dragPage = binding.motionLayout;
		dragPage.setOnDismissListener(() -> {
			getParentFragment().getParentFragmentManager().popBackStack();
		});

		return binding.getRoot();
	}

	private float touchSlop;

	//Using this instead of checking for scale == 1 or whatever in case user is still holding, touches on scale==1, and continues scaling
	boolean photoScaling = false;
	private float downX, downY;
	private boolean vpAllowed;

	@OptIn(markerClass = UnstableApi.class)
	@SuppressLint("ClickableViewAccessibility")
	@Override
	public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);

		touchSlop = ViewConfiguration.get(requireContext()).getScaledTouchSlop();


		//dragPage.requestDisallowInterceptTouchEvent(true);
		//viewPager.setUserInputEnabled(false);

		player = new ExoPlayer.Builder(requireContext()).build();
		surface = binding.viewA.findViewById(R.id.media);

		player.addListener(new Player.Listener() {
			@Override
			public void onVideoSizeChanged(@NonNull VideoSize videoSize) {
				surface.setContentSize(videoSize.width, videoSize.height);
				dragPage.onMediaReady(videoSize.height);
			}
		});
		surface.addCallback(new ZoomSurfaceView.Callback() {
			@Override
			public void onZoomSurfaceCreated(@NonNull ZoomSurfaceView view) {
				player.setVideoSurface(view.getSurface());
			}

			@Override
			public void onZoomSurfaceDestroyed(@NonNull ZoomSurfaceView view) { }
		});


		PlayerControlView controls = binding.viewA.findViewById(R.id.player_control_view);;
		controls.setPlayer(player);
		controls.setShowTimeoutMs(0);
		controls.show();


		Thread load = new Thread(() -> {
			try {
				Uri uri = HybridAPI.getInstance().getFileContent(item.fileUID).first;

				surface.post(() -> {
					MediaItem mediaItem = MediaItem.fromUri(uri);
					//mediaItem = MediaItem.fromUri(Uri.parse("https://file-examples.com/storage/fee47d30d267f6756977e34/2017/04/file_example_MP4_480_1_5MG.mp4"));
					player.setMediaItem(mediaItem);
					player.prepare();
				});
			} catch (FileNotFoundException | ContentsNotFoundException | ConnectException e) {
				//TODO Load error uri
			}
		});
		load.start();



		dragPage.setExtraOnInterceptTouchListener(event -> true);
		dragPage.setOnTouchListener((v, event) -> {
			surface.onTouchEvent(event);
			return false;
		});












	}

	@Override
	public void onPause() {
		super.onPause();
		player.pause();
	}
	@Override
	public void onResume() {
		super.onResume();
		player.play();
	}

	@Override
	public void onStop() {
		super.onStop();
		if (player != null) {
			player.release();
			player = null;
		}
	}
}
